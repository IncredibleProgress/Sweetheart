module default {

  scalar type PlantLocation extending enum<
    'BR','EP','ET','MA','RS','RC' >;

  scalar type BusinessArea extending enum<
    'MEC','CHA','ERA','SGN','SYS','ZO1','ZO2','ZO3','EXT' >;

  scalar type StaffCode extending str {
    description := 'format: SLxxxxx where x is a digit';
    constraint regexp(r'^SL\d{5}$'); }

  # Sequence scalar types for auto IDs
  scalar type EquipmenId extending sequence;
  scalar type PurchasedItemId extending sequence; 
  scalar type NotificationId extending sequence;
  scalar type OperationId extending sequence;
  
  type StaffMember {
    required staff_id: StaffCode { constraint exclusive }
    required first_name: str;
    required last_name: str;
    required email: str;
    optional phone: str;
    optional position: str;
    optional plant_location: PlantLocation;
    optional business_area: BusinessArea;
    optional is_active: bool;
  }

  type Equipment {
    required equipment_id: EquipmenId {
      constraint exclusive;
      constraint min_ex_value(10000000);
      constraint max_ex_value(20000000); }
    required description: str;
    required criticality: str {
      constraint one_of('HIGH','MEDIUM','LOW') }
    required plant_location: PlantLocation;
    optional manufacturer: str;
    optional model_number: str;
    optional serial_number: str;
    optional installation_date: datetime;
    optional assigned_to: BusinessArea;
    optional is_active: bool;
  }

  type PurchasedItem {
    required item_id: int32 {
      constraint exclusive;
      constraint min_ex_value(10000000) }
    required description: str;
    required plant_location: str;
    optional warehouse_location: str;
    optional unit_of_measure: str {
      constraint one_of('UNIT','BUNDLE','KG','L','M') }
    optional quantity_in_stock: int16;
    optional reorder_level: int16;
    required category: str {
      constraint one_of('SPARE','TOOL','CONSUMABLE','CHEMICAL','PACKAGING') }
    optional regulatory_info: str;
    optional specifications: str;
    optional vendor_references: array<VendorReference>;
    optional multi identical_items: PurchasedItem;
    optional is_maintainable: bool;
    optional is_active: bool;
  }

  abstract type VendorReference {
    required vendor_identifier: str;
    optional vendor_item_reference: str;
    optional vendor_item_price: float32;
    optional vendor_item_currency: str;
    optional vendor_item_lead_time_days: int16;
    optional vendor_order_quantity: int16;
    optional vendor_instructions: str;
  }

  type Notification {
    optional status: str;
    required number: int32;
    required short_text: str;
    required created_by: StaffMember;
    required created_at: datetime;
    optional long_text: str;
    optional updated_by: array<StaffMember>;
    optional updated_at: array<datetime>;
  }

  type Operation {
    status: str;
    required operation_id: int32;
    required description: str;
    required assigned_to: array<StaffMember>;
    subcontractor: str;
    materials: array<SparePart>;
    scheduled_date: datetime;
    completed_date: datetime;
  }

  

}