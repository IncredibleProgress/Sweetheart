from typing import Self
from pathlib import Path

from rethinkdb import RethinkDB as R
from rethinkdb.errors import ReqlDriverError, ReqlOpFailedError

from sweetheart import *
from sweetheart.urllib import urlparse
from sweetheart.systemctl import Unit, Systemd
from sweetheart.asgi3 import AsgiLifespanRouter, Route, Websocket, DataHub, JSONResponse


class WebappServer(Unit):

    def __init__(self,config:BaseConfig):
        
        self.data = []
        self.config = config
        WebappServer._config_ = config
        self.middelware = None #FIXME

    def mount(self,
        *args: Route|DataHub ) -> Self:
        
        self.data.extend(args)
        return self

    def app(self,
        *args: Route|DataHub ) -> AsgiLifespanRouter:
        """ Create ASGI app from given args"""

        if args: assert self.data == []
        else: args = self.data

        # allow only Route and DataHub instances
        allow = (Route,DataHub)
        assert all([isinstance(arg,allow) for arg in args])

        self.mount(*args)
        del self.data#! new mount forbidden

        return AsgiLifespanRouter(
            routes = args,
            debug = BaseConfig.debug,
            middelware = self.middelware )

    def set_service(self,
            unit = False,
            share_directory = True,
            source: str = "json", ):

        pyconf = self.config["python_app"]
        pyfile = Path(pyconf['path']) / f"{pyconf['module']}.py"

        pyfile.parent.mkdir(parents=True,exist_ok=True)
        pyfile.write_text(self.generate_python_script(pyconf))

        if unit:
            # force new NginxUnit config
            self.load_unit_config(source)
            self.set_unit_config(share_directory)
            Unit.put_unit_config()

    @staticmethod
    def generate_python_script(pyconf:dict):

        return f"""# {pyconf["module"]}.py
# auto-generated by sweetheart.services.WebappServer
# USER: {os.getuser()} DATE: {os.stdout("date")}
from sweetheart.services import *

config = set_config({{
    # set here your app config
    # empty values are auto-set
}})

{pyconf["callable"]} = WebappServer(config).app(
    # set here url routing for your app
    # default is a rethinkdb data driver at /data
    DataHub("/data", RethinkDB()),
)"""


class RethinkDB(Systemd):
    """
    A RethinkDB wrapper providing endpoints and systemd service management.
    """

    def __init__(self,config:BaseConfig=None):
        
        if config is None:
            # auto-set current app config
            config = WebappServer._config_

        self.r = R()
        self.rconfig = config["rethinkdb"]
        self.websocket = Websocket()
        self.websocket.on_receive = self.on_receive

        self.restapi = {
            "GET": self.on_GET,
            # "PUT": self.on_put,
            # "PATCH": self.on_patch,
            # "POST": self.on_post,
            # "DELETE": self.on_delete
        }

    def connect(self,database:str):

        try: 
            conn = self.r.connect(
                host = self.host,
                port = self.port,
                db = database )
                # user = self.config["rethinkdb"]["user"],
                # password = self.config["rethinkdb"]["password"] )

        except ReqlDriverError as err:
            echo("Connection to RethinkDB failed",prefix=ansi.RED)

        self.conn = conn
        return conn

    def run_expr(self,query:str,conn=None):
        """ run given RethinkDB query """
        if not conn: conn = self.conn
        return self.r.expr(query).run(conn)

    def on_receive(self,data:dict):
        """ Handle incoming websocket data """

        if data.get("text"):
            # get json content from text
            assert data.get("bytes") is None
            json: dict = json.loads(data["text"])

        elif data.get("bytes"):
            # get json content from bytes
            json: dict = json.loads(data["bytes"].decode())

        if json.get("action") == "ws.reql":
            assert os.getenv("SWS_OPERATING_STATE") == "development"
            # execute any RethinkDB query
            cursor = self.run_expr(json["query"])
            return JSONResponse(cursor)

        elif json.get("action")[:7] == "ws.rest":
            # execute given Rest Api query (e.g., ws.rest.get)
            method = json["action"][8:].upper()       
            return self.restapi[method](json)

        else:
            self.websocket.send_json(
                {"Err": "Invalid websocket action"})

    def on_GET(self,d:dict) -> JSONResponse:
        # Rest Api GET
        r = self.r.table(d["table"])
        if d.get("filter"): r.filter(d["filter"])
        cursor = r.run(self.conn)
        return JSONResponse(cursor)

    # def on_post(self,d:dict):
    #     # Rest Api POST
    #     r = self.r.table(d["table"])
    #     r.insert(d["data"]).run(self.connect)

    # def on_patch(self,d:dict):
    #     # Rest Api PATCH
    #     r = self.r.table(d["table"])
    #     r.get(d["id"]).update(d["data"]).run(self.connect)

    # def def on_put(self,d:dict):
    #     # Rest Api PUT
    #     r = self.r.table(d["table"])
    #     r.get(d["id"]).replace(d["data"]).run(self.connect)

    # def on_delete(self,d:dict):
    #     # Rest Api DELETE
    #     r = self.r.table(d["table"])
    #     r.get(d["id"]).delete().run(self.connect)

    def set_service(self,enable:str=None):

        ExecStart = " ".join(["rethinkdb",
            *[f"--{k} {v}" for k,v in self.rconfig.items()] ])

        self.set_systemd_service({
            "Unit": {
                "Description": "RethinkDB running for Sweetheart",
                "After": "network.target" },
            "Service": {
                "ExecStart": ExecStart,
                "Restart": "always",
                "User": os.getuser(),#FIXME
                "Group": os.getuser() },#FIXME
                "WorkingDirectory": f"{self.root}/databases",#FIXME
            "Install": {
                "WantedBy": "multi-user.target" } })
        
        if enable is not None:
            assert isinstance(enable,str)
            self.enable_systemd_service(enable)

    def __del__(self):

        if hasattr(self,"conn"):
            self.conn.close()


# --- --- Legacy Code --- ---

# def mount(self,*args:str|Route|DataHub) -> Self:

    #     def args_are(typ):
    #         # return True when all args are instances of typ
    #         return all([isinstance(arg, typ) for arg in args])

    #     if args_are(str):
    #         assert not self.data
    #         assert not hasattr(self,"mount_str_")
    #         self.mount_str_ = ",\n".join(args)

    #     elif args_are((Route,DataHub)):
    #         assert not hasattr(self,"mount_str_")
    #         self.data.extend(args)
        
    #     else:
    #         raise Exception("Invalid args given to mount()")

    #     return self