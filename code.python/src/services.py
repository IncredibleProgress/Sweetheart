from typing import Self
from collections import UserList

from sweetheart import *
from sweetheart.urllib import urlparse
from sweetheart.systemctl import Unit, Systemd
from sweetheart.asgi3 import AsgiLifespanRouter, Route, DataHub


class WebappServer(Unit):

    def __init__(self,config:BaseConfig):
        
        self.data = []
        self.config = config
        self.middelware = None #FIXME

    def mount(self,*args:str|Route) -> Self:

        def args_are(typ):
            # return True when all args are instances of typ
            return all([isinstance(arg, typ) for arg in args])

        if args_are(str):
            assert not self.data
            assert not hasattr(self,"mount_str_")
            self.mount_str_ = ",\n".join(args)

        elif args_are((Route,DataHub)):
            assert not hasattr(self,"mount_str_")
            self.data.extend(args)
        
        else:
            raise Exception("Invalid args given to mount()")

        return self

    def app(self,*args:Route) -> AsgiLifespanRouter:

        self.mount(*args)

        return AsgiLifespanRouter(
            routes = self.data,
            debug = BaseConfig.debug,
            middelware = self.middelware )

    def set_service(self,unit=False):

        assert hasattr(self,"mount_str_")

        path = self.config["python_app"]["path"]
        module = self.config["python_app"]["module"]

        with open(f"{path}/{module}.py",'w') as python_script:
            python_script.write(f'''
"""
{self.config["python_app"]["module"]}.py
auto-generated by sweetheart.services.WebappServer
[ USER: {os.getuser()} ] [ DATE: {os.stdout("date")} ]
"""
from sweetheart.services import *

config = set_config()

{self.config["python_app"]["callable"]} = WebappServer(config).app(
    # set here url routing of your sweetheart app
    {self.mount_str_} )
'''.strip() )
        
        if unit:
            # force a new NginxUnit config
            self.load_unit_config(source="json")
            self.set_unit_config(share_directory=True)
            Unit.put_unit_config()


class RethinkDB(Systemd):

    # default settings
    admin = urlparse("http://127.0.0.1:8082")
    serve = urlparse("RethinkDB://127.0.0.1:28015")

    def __init__(self,config:BaseConfig):
        
        self.config = config
        self.port = RethinkDB.serve.port
        self.host = RethinkDB.serve.hostname

    def set_client(self,dbname:str):

        try:
            self.connect.close()
            echo("existing RethinkDB connection closed",prefix=ansi.RED)
        
        finally:

            # [LocalImport]
            from rethinkdb import r

            self.client = self.r = r
            self.connect = r.connect(self.host,self.port,db=dbname)

            return self.client

    def set_service(self,enable:str=None):

        self.set_systemd_service({

            "Unit": {
                "Description": "RethinkDB running for Sweetheart",
                "After": "network.target" },

            "Service": {
                "ExecStart": f"rethinkdb --http-port {self.admin.port} -d {self.config.database}",
                "Restart": "always",
                "User": os.getuser(),
                "Group": os.getuser() },#FIXME

            "Install": {
                "WantedBy": "multi-user.target" } })
        
        if enable:
            self.enable_systemd_service(enable)

    # def on_receive(self,websocket,data):
    #     raise NotImplementedError

    def __del__(self):

        if hasattr(self,'connect'):
            self.connect.close()
    